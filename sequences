numbers = list(range(1, 16)) #Sequence Slicing 5.5 #Ashley Allen 

numbers
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

numbers[1:len(numbers):2]
[2, 4, 6, 8, 10, 12, 14]

numbers[5:10] = [0] * len(numbers[5:10])

numbers
[1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 11, 12, 13, 14, 15]

numbers[5:] =[]

numbers
[1, 2, 3, 4, 5]

numbers[:] = []

numbers
[]
[ ]:

numbers = list(range(1, 16)) #del statement 5.6

numbers
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

del numbers[0:4]

numbers 
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

del numbers[::2]

numbers
[6, 8, 10, 12, 14]

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6] #Sort a list in Descending Order 5.8

numbers.sort(reverse=True)

numbers
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

ascending_numbers = sorted(numbers)

ascending_numbers
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

numbers
[10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

letters = 'fadgchjebi'

ascending_letters = sorted(letters)

ascending_letters
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

letters 
'fadgchjebi'

colors = ('red', 'orange', 'yellow', 'green', 'blue')

ascending_colors = sorted(colors)

ascending_colors
['blue', 'green', 'orange', 'red', 'yellow']

colors
('red', 'orange', 'yellow', 'green', 'blue')

foods = ['Cookies', 'pizza', 'Grapes', 'apples', 'steak', 'Bacon'] #5.8 Self Checks, Note that uppercase letters have a higher numerical value than lowercase letters. 

foods.sort()

foods
['Bacon', 'Cookies', 'Grapes', 'apples', 'pizza', 'steak']

numbers = [67, 12, 46, 43, 13] #5.9 self checks

numbers.index(43)
3

if 44 in numbers:
    print(f'Found 44 at index: {numbers.index(44)}')
else:
    print('44 not found')
44 not found

cubes = [(x, x ** 3) for x in range(1, 6)] # 5.12 self check 3, List Comprehensions 

cubes
[(1, 1), (2, 8), (3, 27), (4, 64), (5, 125)]

multiples = [x for x in range(3, 30, 3)] # 5.12 self check 4, List Comprehensions 

multiples
[3, 6, 9, 12, 15, 18, 21, 24, 27]

numbers = list(range(1, 16)) #5.14 slef check 3, Filter, Map, and Reduce 

numbers
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

list(filter(lambda x: x % 2 == 0, numbers))
[2, 4, 6, 8, 10, 12, 14]

list(map(lambda x: x ** 2, numbers))
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]

list(map(lambda x: x ** 2, filter(lambda x: x % 2 == 0, numbers)))
[4, 16, 36, 64, 100, 144, 196]

fahrenheit = [41, 32, 212] #5.14 slef check 4, Filter, Map, and Reduce 

list(map(lambda x: (x, (x - 32) * 5/9), fahrenheit))
[(41, 5.0), (32, 0.0), (212, 100.0)]

t = [[10, 7, 3], [20, 4, 17]] #5.16 slef check, Two-Dimensional Lists 

total = 0

items = 0

for row in t: 
    for item in row: 
        total += item 
        items += 1

total/items
10.166666666666666

total = 0

items = 0 

for row in t: 
    total += sum(row)
    items += len(row)

total/items
10.166666666666666
